<?php

/**
 * @file
 * TODO: Enter file description here.
 */

/**
 * Implements hook_help().
 */
function google_photos_gallery_help($path, $arg) {
  switch ($path) {
    // Main module help for the block module
    case 'admin/help':
      return '<p>' . t('Use function to load metadata values from google photos urls', array('@blocks' => url('admin/structure/block'))) . '</p>';
  }
}

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function google_photos_gallery_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'google_photos_gallery_url' => array(
      'label' => t('Google Photos Album Link'),
      'description' => t('Load image from album link.'),
      'default_widget' => 'google_photos_gallery_3text',
      'default_formatter' => 'google_photos_gallery_simple_text',
    ),
  );
}
/**
 * Implements hook_field_widget_info().
 *
 * Three widgets are provided.
 * - A simple text-only widget where the user enters the '#ffffff'.
 * - A 3-textfield widget that gathers the red, green, and blue values
 *   separately.
 * - A farbtastic colorpicker widget that chooses the value graphically.
 *
 * These widget types will eventually show up in hook_field_widget_form,
 * where we will have to flesh them out.
 *
 * @see google_photos_gallery_field_widget_form()
 */
function google_photos_gallery_field_widget_info() {
  return array(
    'google_photos_gallery_load_img' => array(
      'label' => t('Google Photos Image'),
      'field types' => array('google_photos_gallery_url'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 *
 * We need to tell Drupal that we have two different types of formatters
 * for this field. One will change the text color, and the other will
 * change the background color.
 *
 * @see google_photos_gallery_field_formatter_view()
 */
function google_photos_gallery_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'google_photos_gallery_simple_text' => array(
      'label' => t('Simple text-based formatter'),
      'field types' => array('google_photos_gallery_url'),
    ),
    // This formatter changes the background color of the content region.
    'google_photos_gallery_color_background' => array(
      'label' => t('Change the background of the output text'),
      'field types' => array('google_photos_gallery_url'),
    ),
  );
}







// function google_photos_gallery_url($fotosurl){
//     $html = google_photos_gallery_file_get_contents_curl($fotosurl);

//     //parsing begins here:
//     $doc = new DOMDocument();
//     @$doc->loadHTML($html);
//     $nodes = $doc->getElementsByTagName('title');

//     //get and display what you need:
//     $title = $nodes->item(0)->nodeValue;

//     $metas = $doc->getElementsByTagName('meta');

//     for ($i = 0; $i < $metas->length; $i++)
//     {
//         $meta = $metas->item($i);
//         if($meta->getAttribute('name') == 'description')
//             $description = $meta->getAttribute('content');
//         if($meta->getAttribute('name') == 'keywords')
//             $keywords = $meta->getAttribute('content');
//     }

//     echo "Title: $title". '<br/><br/>';
//     echo "Description: $description". '<br/><br/>';
//     echo "Keywords: $keywords";
// }

// function google_photos_gallery_file_get_contents_curl($url)
// {
//     $ch = curl_init();

//     curl_setopt($ch, CURLOPT_HEADER, 0);
//     curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
//     curl_setopt($ch, CURLOPT_URL, $url);
//     curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);

//     $data = curl_exec($ch);
//     curl_close($ch);

//     return $data;
// }
